{"version":3,"sources":["css/dimensions.scss","css/colors.scss","index.scss","serviceWorker.ts","components/svg/Hexagon.tsx","components/HexGrid.tsx","components/StarMapController.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","SvgHexagon","props","height","width","viewBox","id","d","fill","stroke","strokeWidth","clipPath","className","_","require","HexGrid","gridLayout","_buildLayout","size","gridWidth","gridHeight","rows","columns","rowIndex","colIndex","xGridCoord","padStart","yGridCoord","Math","floor","gridCoordString","hexData","data","systems","filter","node","rowOffset","ODD_OFFSET","push","key","data-hex-text","hexText","position","Hexagon","state","hover","_toggleHover","setState","HexagonContainer","this","onMouseEnter","onMouseLeave","HexCoord","HexName","name","HexFooter","planets","length","colors","hexFillHover","hexFill","hexStrokeHover","hexStroke","dimensions","hexStrokeWidthHover","hexStrokeWidth","Component","styled","div","CentreHex","fontColor","StarMapController","showModal","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.01d491b0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"hexStrokeWidth\":\"20\",\"hexStrokeWidthHover\":\"20\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backgroundColor\":\"#2d2d2d\",\"fontColor\":\"#626262\",\"hexFill\":\"#373737\",\"hexStroke\":\"#2d2d2d\",\"hexFillHover\":\"rgba(97, 144, 230, 0.25)\",\"hexStrokeHover\":\"#6190e6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backgroundColor\":\"#2d2d2d\",\"fontColor\":\"#626262\",\"hexFill\":\"#373737\",\"hexStroke\":\"#2d2d2d\",\"hexFillHover\":\"rgba(97, 144, 230, 0.25)\",\"hexStrokeHover\":\"#6190e6\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from \"react\";\n\nconst SvgHexagon = (props: React.SVGProps<SVGSVGElement>) => (\n    <svg height={628} width={726} viewBox={\"0 0 726 628\"} {...props}>\n        <defs>\n            <clipPath id=\"clipPath\">\n                <path d=\"M723 314L543 625.77H183L3 314 183 2.23h360L723 314z\" />\n            </clipPath>\n        </defs>\n        <path\n            fill={props.fill || \"#fff\"}\n            stroke={props.stroke || \"#000\"}\n            strokeWidth={props.strokeWidth || 4}\n            d=\"M723 314L543 625.77H183L3 314 183 2.23h360L723 314z\"\n            clipPath={\"url(#clipPath)\"}\n            className=\"hex\"\n        />\n    </svg>\n);\n\nexport default SvgHexagon;\n","import React, { FunctionComponent, Component } from \"react\";\nimport styled from \"styled-components\";\nimport SvgHexagon from \"./svg/Hexagon\";\nimport data from \"../data/sector.json\";\nimport colors from \"../css/colors.scss\";\nimport dimensions from \"../css/dimensions.scss\"\nimport { SectorData, SystemData } from \"./StarMapController\";\n\nconst _ = require(\"lodash\");\n\nconst HEX_SIZE = 100;\nconst COLUMN_OFFSET = 1.48;\nconst ROW_OFFSET = 0.4275;\nconst ODD_OFFSET = 0.74;\n\n/**\n * HexGrid Component\n */\ninterface HexGridProps {\n    size: {\n        width: number;\n        height: number;\n    };\n    data: SectorData;\n}\n\nexport const HexGrid: FunctionComponent<HexGridProps> = (\n    props: HexGridProps,\n) => {\n    const gridLayout: JSX.Element[] = _buildLayout(props.size.width, props.size.height);\n\n    return <>{gridLayout}</>;\n};\n\nconst _buildLayout = (gridWidth: number, gridHeight: number) => {\n    const gridLayout: JSX.Element[] = [];\n    const rows = gridHeight * 2;\n    const columns = gridWidth / 2;\n    // Calculate Rows\n    for (let rowIndex = 0; rowIndex < rows; rowIndex++) {\n        for (let colIndex = 0; colIndex < columns; colIndex++) {\n            const xGridCoord = _.padStart(\n                rowIndex % 2 ? colIndex * 2 + 2 : colIndex * 2 + 1,\n                2,\n                \"0\",\n            );\n            const yGridCoord = _.padStart(Math.floor(rowIndex / 2) + 1, 2, \"0\");\n            const gridCoordString = `${xGridCoord}${yGridCoord}`;\n            const hexData = data.systems.filter(node => {\n                return node.location === gridCoordString;\n            })[0];\n            // Odd Rows are offset by 75%\n            const rowOffset = rowIndex % 2 ? ODD_OFFSET * HEX_SIZE : 0;\n            gridLayout.push(\n                <Hexagon\n                    key={`hex-${xGridCoord}-${yGridCoord}`}\n                    data-hex-text={`hex-${xGridCoord}-${yGridCoord}`}\n                    hexText={`${xGridCoord}${yGridCoord}`}\n                    size={HEX_SIZE}\n                    position={[\n                        colIndex * HEX_SIZE * COLUMN_OFFSET + rowOffset,\n                        rowIndex * HEX_SIZE * ROW_OFFSET,\n                    ]}\n                    data={hexData}\n                />,\n            );\n        }\n    }\n    return gridLayout;\n};\n\n/**\n * Hexagon Component\n */\ninterface HexagonProps {\n    size: number;\n    position: [number, number];\n    hexText?: string;\n    data?: SystemData;\n}\n\ninterface HexagonState {\n    hover: boolean;\n}\n\nexport class Hexagon extends Component<HexagonProps, HexagonState> {\n    state: HexagonState = {\n        hover: false,\n    };\n\n    _toggleHover = () => {\n        this.setState({ hover: !this.state.hover });\n    };\n\n    render() {\n        return (\n            <HexagonContainer\n                {...this.props}\n                onMouseEnter={this._toggleHover}\n                onMouseLeave={this._toggleHover}\n                hover={this.state.hover}\n            >\n                <HexCoord size={this.props.size}>{this.props.hexText}</HexCoord>\n                {this.props.data && (\n                    <>\n                        <HexName size={this.props.size}>\n                            {this.props.data.name}\n                        </HexName>\n                        <HexFooter size={this.props.size}>\n                            {_.padStart(\n                                \"\",\n                                this.props.data.planets.length,\n                                \"⬤\",\n                            )}\n                        </HexFooter>\n                    </>\n                )}\n                <SvgHexagon\n                    width={this.props.size}\n                    height={this.props.size}\n                    fill={\n                        this.state.hover ? colors.hexFillHover : colors.hexFill\n                    }\n                    stroke={\n                        this.state.hover\n                            ? colors.hexStrokeHover\n                            : colors.hexStroke\n                    }\n                    strokeWidth={this.state.hover ? dimensions.hexStrokeWidthHover : dimensions.hexStrokeWidth}\n                />\n            </HexagonContainer>\n        );\n    }\n}\n\ninterface HexagonContainerProps extends HexagonProps {\n    hover: boolean;\n}\nconst HexagonContainer = styled.div`\n    position: absolute;\n    width: ${(props: HexagonContainerProps) => props.size}px;\n    height: ${(props: HexagonContainerProps) => props.size}px;\n    transform: translate(\n        ${(props: HexagonContainerProps) =>\n            `${props.position[0]}px,${props.position[1]}px`}\n    );\n    z-index: ${(props: HexagonContainerProps) => (props.hover ? `10` : `0`)};\n\n    > div {\n        // font-weight: ${(props: HexagonContainerProps) =>\n            props.hover ? `600` : `normal`}\n        color: ${(props: HexagonContainerProps) =>\n            props.hover ? `#b5b5b5` : ``}\n    }\n`;\n\nconst CentreHex = styled.div`\n    text-align: center;\n    position: absolute;\n    width: 50px;\n    left: calc(50% - 50px / 2);\n    color: ${colors.fontColor};\n`;\n\ninterface HexLabelProps {\n    size: number;\n}\nconst HexCoord = styled(CentreHex)`\n    top: ${(props: HexLabelProps) => props.size * 0.1}px;\n    font-family: roboto-mono, sans-serif;\n    font-size: 12px;\n    letter-spacing: -0.05em;\n`;\n\nconst HexName = styled(CentreHex)`\n    top: ${(props: HexLabelProps) => props.size * 0.4}px;\n    font-family: roboto-condensed, sans-serif;\n    font-size: 14px;\n`;\n\nconst HexFooter = styled(CentreHex)`\n    top: ${(props: HexLabelProps) => props.size * 0.75}px;\n    font-family: roboto-mono, sans-serif;\n    font-size: 8px;\n`;\n","import React, { Component } from \"react\";\nimport { HexGrid } from \"./HexGrid\";\nimport data from \"../data/sector.json\";\n\n// Get types from JSON File\nexport type SectorData = typeof import(\"../data/sector.json\");\nexport type SystemData = SectorData[\"systems\"][0];\n\ninterface Props {\n    size: {\n        width: number;\n        height: number;\n    };\n}\n\ninterface State {\n    showModal: boolean;\n}\n\nexport class StarMapController extends Component<Props, State> {\n\n    state: State = {\n        showModal: false\n    }\n\n    render() {\n        return (\n            <>\n                <HexGrid\n                    {...this.props}\n                    data={data}\n                />\n            </>\n        )\n    }\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { StarMapController } from \"./components/StarMapController\";\n\nReactDOM.render(\n    <StarMapController\n        size={{\n            width: 8,\n            height: 8,\n        }}\n    />,\n    document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}