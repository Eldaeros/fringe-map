{"version":3,"sources":["components/svg/Hexagon.tsx","components/HexGrid.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["SvgHexagon","props","height","width","viewBox","id","d","fill","stroke","strokeWidth","clipPath","className","_","require","HexGrid","gridLayout","rows","size","columns","rowIndex","colIndex","xGridCoord","padStart","yGridCoord","Math","floor","rowOffset","ODD_OFFSET","push","key","data-hex-text","hexText","position","Hexagon","state","hover","_toggleHover","setState","HexagonContainer","this","onMouseEnter","onMouseLeave","HexLabel","Component","styled","div","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRAoBeA,EAlBI,SAACC,GAAD,OACf,qCAAKC,OAAQ,IAAKC,MAAO,IAAKC,QAAS,eAAmBH,GACtD,4BACI,4BAAUI,GAAG,YACT,wBAAMC,EAAE,0DAGhB,wBACIC,KAAMN,EAAMM,MAAQ,OACpBC,OAAQP,EAAMO,QAAU,OACxBC,YAAaR,EAAMQ,aAAe,EAClCH,EAAE,sDACFI,SAAU,iBACVC,UAAU,U,ihBCXtB,IAAMC,EAAIC,EAAQ,IAcLC,EAA2C,SACpDb,GAMA,IAJA,IAAMc,EAA4B,GAC5BC,EAA2B,EAApBf,EAAMgB,KAAKf,OAClBgB,EAAUjB,EAAMgB,KAAKd,MAAQ,EAE1BgB,EAAW,EAAGA,EAAWH,EAAMG,IACpC,IAAK,IAAIC,EAAW,EAAGA,EAAWF,EAASE,IAAY,CACnD,IAAMC,EAAaT,EAAEU,SACjBH,EAAW,EAAe,EAAXC,EAAe,EAAe,EAAXA,EAAe,EACjD,EACA,KAEEG,EAAaX,EAAEU,SAASE,KAAKC,MAAMN,EAAW,GAAK,EAAG,EAAG,KAGzDO,EAAYP,EAAW,EAAIQ,GAAwB,EACzDZ,EAAWa,KACP,kBAAC,EAAD,CACIC,IAAG,cAASN,EAAT,YAAuBF,GAC1BS,gBAAA,cAAsBP,EAAtB,YAAoCF,GACpCU,QAAO,UAAKR,GAAL,OAAkBF,GACzBJ,KA5BH,IA6BGe,SAAU,CA7Bb,IA8BOZ,EA7BF,KA6BwCM,EA9B7C,IA+BOP,EA7BL,UAoCf,OACI,oCACKJ,IAeAkB,EAAb,2MACIC,MAAsB,CAClBC,OAAO,GAFf,EAKIC,aAAe,WACX,EAAKC,SAAS,CAAEF,OAAQ,EAAKD,MAAMC,SAN3C,wEAUQ,OACI,kBAACG,EAAD,iBACQC,KAAKtC,MADb,CAEIuC,aAAcD,KAAKH,aACnBK,aAAcF,KAAKH,aACnBD,MAAOI,KAAKL,MAAMC,QAElB,kBAACO,EAAD,CAAUzB,KAAMsB,KAAKtC,MAAMgB,MAAOsB,KAAKtC,MAAM8B,SAC7C,kBAAC,EAAD,CACI5B,MAAOoC,KAAKtC,MAAMgB,KAClBf,OAAQqC,KAAKtC,MAAMgB,KACnBV,KAAMgC,KAAKL,MAAMC,MAAQ,YAAc,UACvC3B,OAAQ+B,KAAKL,MAAMC,MAAQ,UAAY,UACvC1B,YAAa8B,KAAKL,MAAMC,MAAQ,GAAK,UAvBzD,GAA6BQ,aAiCvBL,EAAmBM,IAAOC,IAAV,IAET,SAAC5C,GAAD,OAAkCA,EAAMgB,MACvC,SAAChB,GAAD,OAAkCA,EAAMgB,MAE5C,SAAChB,GAAD,gBACKA,EAAM+B,SAAS,GADpB,cAC4B/B,EAAM+B,SAAS,GAD3C,OAGK,SAAC/B,GAAD,OAAmCA,EAAMkC,MAAN,SAGxB,SAAClC,GAAD,OACdA,EAAMkC,MAAN,gBACK,SAAClC,GAAD,OACLA,EAAMkC,MAAN,eAQNO,EAAWE,IAAOC,IAAV,IAEH,SAAC5C,GAAD,MAAuC,IAAbA,EAAMgB,OC7G5B6B,EAbO,WACpB,OACE,yBAAKnC,UAAU,OACb,kBAAC,EAAD,CACEM,KAAM,CACJd,MAAO,EACPD,OAAQ,QCGE6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a46b284b.chunk.js","sourcesContent":["import * as React from \"react\";\n\nconst SvgHexagon = (props: React.SVGProps<SVGSVGElement>) => (\n    <svg height={628} width={726} viewBox={\"0 0 726 628\"} {...props}>\n        <defs>\n            <clipPath id=\"clipPath\">\n                <path d=\"M723 314L543 625.77H183L3 314 183 2.23h360L723 314z\" />\n            </clipPath>\n        </defs>\n        <path\n            fill={props.fill || \"#fff\"}\n            stroke={props.stroke || \"#000\"}\n            strokeWidth={props.strokeWidth || 4}\n            d=\"M723 314L543 625.77H183L3 314 183 2.23h360L723 314z\"\n            clipPath={\"url(#clipPath)\"}\n            className=\"hex\"\n        />\n    </svg>\n);\n\nexport default SvgHexagon;\n","import React, { FunctionComponent, Component } from \"react\";\nimport styled from \"styled-components\";\nimport SvgHexagon from \"./svg/Hexagon\";\n\nconst _ = require(\"lodash\");\n\ninterface HexGridProps {\n    size: {\n        width: number;\n        height: number;\n    };\n}\n\nconst HEX_SIZE = 100;\nconst COLUMN_OFFSET = 1.48;\nconst ROW_OFFSET = 0.4275;\nconst ODD_OFFSET = 0.74;\n\nexport const HexGrid: FunctionComponent<HexGridProps> = (\n    props: HexGridProps,\n) => {\n    const gridLayout: JSX.Element[] = [];\n    const rows = props.size.height * 2;\n    const columns = props.size.width / 2;\n    // Calculate Rows\n    for (let rowIndex = 0; rowIndex < rows; rowIndex++) {\n        for (let colIndex = 0; colIndex < columns; colIndex++) {\n            const xGridCoord = _.padStart(\n                rowIndex % 2 ? colIndex * 2 + 2 : colIndex * 2 + 1,\n                2,\n                \"0\",\n            );\n            const yGridCoord = _.padStart(Math.floor(rowIndex / 2) + 1, 2, \"0\");\n\n            // Odd Rows are offset by 75%\n            const rowOffset = rowIndex % 2 ? ODD_OFFSET * HEX_SIZE : 0;\n            gridLayout.push(\n                <Hexagon\n                    key={`hex-${yGridCoord}-${xGridCoord}`}\n                    data-hex-text={`hex-${yGridCoord}-${xGridCoord}`}\n                    hexText={`${yGridCoord}${xGridCoord}`}\n                    size={HEX_SIZE}\n                    position={[\n                        colIndex * HEX_SIZE * COLUMN_OFFSET + rowOffset,\n                        rowIndex * HEX_SIZE * ROW_OFFSET,\n                    ]}\n                />,\n            );\n        }\n    }\n\n    return (\n        <>\n            {gridLayout}\n        </>\n    );\n};\n\ninterface HexagonProps {\n    size: number;\n    position: [number, number];\n    hexText?: string;\n}\n\ninterface HexagonState {\n    hover: boolean;\n}\n\nexport class Hexagon extends Component<HexagonProps, HexagonState> {\n    state: HexagonState = {\n        hover: false,\n    };\n\n    _toggleHover = () => {\n        this.setState({ hover: !this.state.hover });\n    };\n\n    render() {\n        return (\n            <HexagonContainer\n                {...this.props}\n                onMouseEnter={this._toggleHover}\n                onMouseLeave={this._toggleHover}\n                hover={this.state.hover}\n            >\n                <HexLabel size={this.props.size}>{this.props.hexText}</HexLabel>\n                <SvgHexagon\n                    width={this.props.size}\n                    height={this.props.size}\n                    fill={this.state.hover ? \"#6190e610\" : \"#2b2b2b\"}\n                    stroke={this.state.hover ? \"#6190e6\" : \"#626262\"}\n                    strokeWidth={this.state.hover ? 20 : 10}\n                />\n            </HexagonContainer>\n        );\n    }\n}\n\ninterface HexagonContainerProps extends HexagonProps {\n    hover: boolean;\n}\nconst HexagonContainer = styled.div`\n    position: absolute;\n    width: ${(props: HexagonContainerProps) => props.size}px;\n    height: ${(props: HexagonContainerProps) => props.size}px;\n    transform: translate(\n        ${(props: HexagonContainerProps) =>\n            `${props.position[0]}px,${props.position[1]}px`}\n    );\n    z-index: ${(props: HexagonContainerProps) => (props.hover ? `0` : `1`)};\n\n    > div {\n        // font-weight: ${(props: HexagonContainerProps) =>\n            props.hover ? `600` : `normal`}\n        color: ${(props: HexagonContainerProps) =>\n            props.hover ? `#b5b5b5` : ``}\n    }\n\n`;\n\ninterface HexLabelProps {\n    size: number;\n}\nconst HexLabel = styled.div`\n    position: relative;\n    top: ${(props: HexLabelProps) => props.size * 0.25}px;\n    text-align: center;\n    color: #626262;\n    font-family: roboto-mono, sans-serif;\n    font-size: 12px;\n    letter-spacing: -0.05em;\n`;\n","import React from 'react';\nimport { HexGrid } from './HexGrid';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <HexGrid\n        size={{\n          width: 8,\n          height: 10,\n        }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}